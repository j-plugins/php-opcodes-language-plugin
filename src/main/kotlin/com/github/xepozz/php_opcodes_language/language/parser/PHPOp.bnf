{
  parserClass="com.github.xepozz.php_opcodes_language.language.parser.PHPOpParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="PHPOp"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.xepozz.php_opcodes_language.language.psi"
  psiImplPackage="com.github.xepozz.php_opcodes_language.language.psi.impl"
  psiImplUtilClass="com.github.xepozz.php_opcodes_language.language.psi.impl.PHPOpPsiImplUtil"

  elementTypeHolderClass="com.github.xepozz.php_opcodes_language.language.psi.PHPOpTypes"
  elementTypeClass="com.github.xepozz.php_opcodes_language.language.psi.PHPOpElementType"
  tokenTypeClass="com.github.xepozz.php_opcodes_language.language.psi.PHPOpTokenType"

  tokens = [
    LPAREN = "LPAREN ("
    RPAREN = "RPAREN )"
    COMMENT = "COMMENT"
    EOL = "EOL"
    IDENTIFIER = "IDENTIFIER"
    NUMBER = "NUMBER"
    DOLLAR_SIGN = "DOLLAR_SIGN"
    EQUALS_SIGN = "EQUALS_SIGN"
    TEXT = "TEXT"
    IDENTIFIER = "IDENTIFIER"
    COLON = "COLON"
    DASH = "DASH"
  ]
}

phpOpFile ::= item_*

private item_ ::= block | COMMENT | EOL

block ::= block_name COLON statements
block_name ::= var_name | string_literal | method_name | function_name
{
    implements=["com.intellij.psi.NavigatablePsiElement" "com.intellij.psi.PsiNamedElement" "com.intellij.psi.PsiLiteralValue"]
    extends="com.github.xepozz.php_opcodes_language.language.psi.impl.PHPOpBlockNameBaseImpl"
    methods=[isFunction isClass isClassMethod isMain]
}

private method_name ::= IDENTIFIER COLON COLON IDENTIFIER
private function_name ::= IDENTIFIER

statements ::= (statement | COMMENT | EOL)+
statement ::= line_number (assignment_instruction | instruction) | live_range

assignment_instruction ::= (paren_parameter | parameter) EQUALS_SIGN instruction
instruction ::= parameter argument*

argument ::= expr | paren_expr
private expr ::= var_name | string_literal | line_number | paren_parameter | parameter

paren_parameter ::= parameter paren_expr
{
    implements=["com.intellij.psi.NavigatablePsiElement" "com.intellij.psi.PsiNamedElement" "com.intellij.psi.PsiPolyVariantReference"]
    extends="com.github.xepozz.php_opcodes_language.language.psi.impl.PHPOpParenParameterBaseImpl"
}

parameter ::= IDENTIFIER
{
    implements=["com.intellij.psi.NavigatablePsiElement" "com.intellij.psi.PsiNamedElement" "com.intellij.psi.PsiPolyVariantReference"]
    extends="com.github.xepozz.php_opcodes_language.language.psi.impl.PHPOpParameterBaseImpl"
    methods=[isVariable]
}

string_literal ::= TEXT
{
    implements=["com.intellij.psi.PsiLanguageInjectionHost" "com.intellij.psi.PsiLiteralValue"]
    extends="com.github.xepozz.php_opcodes_language.language.psi.impl.PHPOpStringLiteralBaseImpl"
}

paren_expr ::= LPAREN expr RPAREN

var_name ::= DOLLAR_SIGN IDENTIFIER
{
    implements=["com.intellij.psi.NavigatablePsiElement" "com.intellij.psi.PsiNamedElement" "com.intellij.psi.PsiPolyVariantReference"]
    extends="com.github.xepozz.php_opcodes_language.language.psi.impl.PHPOpVarNameBaseImpl"
}

live_range ::= 'LIVE RANGES:' live_range_statements
live_range_statements ::= (live_range_statement | EOL)*

live_range_statement ::= NUMBER COLON live_range_range LPAREN live_type RPAREN
live_range_range ::= line_number DASH line_number
live_type::= IDENTIFIER (SLASH IDENTIFIER)?

line_number ::= NUMBER
{
    implements=["com.intellij.psi.NavigatablePsiElement" "com.intellij.psi.PsiNamedElement" "com.intellij.psi.PsiPolyVariantReference"]
    extends="com.github.xepozz.php_opcodes_language.language.psi.impl.PHPOpLineNumberBaseImpl"
}