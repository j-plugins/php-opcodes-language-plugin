{
  parserClass="com.github.xepozz.php_opcodes_language.language.parser.PHPOpParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="PHPOp"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.xepozz.php_opcodes_language.language.psi"
  psiImplPackage="com.github.xepozz.php_opcodes_language.language.psi.impl"
  psiImplUtilClass="com.github.xepozz.php_opcodes_language.language.psi.impl.PHPOpPsiImplUtil"

  elementTypeHolderClass="com.github.xepozz.php_opcodes_language.language.psi.PHPOpTypes"
  elementTypeClass="com.github.xepozz.php_opcodes_language.language.psi.PHPOpElementType"
  tokenTypeClass="com.github.xepozz.php_opcodes_language.language.psi.PHPOpTokenType"

  tokens = [
    LPAREN = "LPAREN ("
    RPAREN = "RPAREN )"
    COMMENT = "COMMENT"
    EOL = "EOL"
    IDENTIFIER = "IDENTIFIER"
    INTEGER = "INTEGER"
    FLOAT = "FLOAT"
    DOLLAR_SIGN = "DOLLAR_SIGN"
    EQUALS_SIGN = "EQUALS_SIGN"
    QUOTTED_STRING = "QUOTTED_STRING"
    COLON = "COLON"
    DASH = "DASH"
    SLASH = "SLASH"
    BACKSLASH = "BACKSLASH"
    DOT = "DOT"
    COMMA = "COMMA"
    AT_SIGN = "AT_SIGN"
    LBRACE = "LBRACE"
    RBRACE = "RBRACE"
    LBRACKET = "LBRACKET"
    RBRACKET = "RBRACKET"
  ]
}

phpOpFile ::= item_*

private item_ ::= block | COMMENT | EOL

block ::= block_name COLON (statement | live_range | COMMENT | EOL)+
{
    pin=2
}

block_name ::= var_name | string_literal | property_hook_name | method_name | function_name | closure_name
{
    implements=["com.intellij.psi.NavigatablePsiElement" "com.intellij.psi.PsiNamedElement" "com.intellij.psi.PsiLiteralValue"]
    extends="com.github.xepozz.php_opcodes_language.language.psi.impl.PHPOpBlockNameBaseImpl"
    methods=[isFqn isClassMethod isClassPropertyHook isMain getClassFqn]
}

class_name ::= ('class' AT_SIGN 'anonymous') | IDENTIFIER
{
    pin=3
    implements=["com.intellij.psi.NavigatablePsiElement" "com.intellij.psi.PsiNamedElement"]
    extends="com.github.xepozz.php_opcodes_language.language.psi.impl.PHPOpClassNameBaseImpl"
}

method_name ::= class_name COLON COLON IDENTIFIER
{
    pin=3
    implements=["com.intellij.psi.NavigatablePsiElement" "com.intellij.psi.PsiNamedElement"]
    extends="com.github.xepozz.php_opcodes_language.language.psi.impl.PHPOpMethodNameBaseImpl"
    methods=[getClassFqn getMethodNameRange]
}

property_name ::= class_name COLON COLON DOLLAR_SIGN IDENTIFIER
{
    implements=["com.intellij.psi.NavigatablePsiElement" "com.intellij.psi.PsiNamedElement"]
    extends="com.github.xepozz.php_opcodes_language.language.psi.impl.PHPOpPropertyNameBaseImpl"
    methods=[getPropertyNameRange]
}

property_hook_name ::= property_name COLON COLON ('set' | 'get')
{
    implements=["com.intellij.psi.NavigatablePsiElement" "com.intellij.psi.PsiNamedElement"]
    extends="com.github.xepozz.php_opcodes_language.language.psi.impl.PHPOpPropertyHookNameBaseImpl"
    methods=[getPropertyHookNameRange]
}

function_name ::= IDENTIFIER
{
    implements=["com.intellij.psi.NavigatablePsiElement" "com.intellij.psi.PsiNamedElement"]
    extends="com.github.xepozz.php_opcodes_language.language.psi.impl.PHPOpFunctionNameBaseImpl"
}

private closure_name ::= LBRACE 'closure' COLON (path_absolute | method_name LPAREN RPAREN) COLON INTEGER RBRACE
{
    pin=2
}

path_absolute ::= (SLASH | BACKSLASH) (IDENTIFIER | DOT | SLASH | BACKSLASH | DASH)+
{
    implements=["com.intellij.psi.NavigatablePsiElement" "com.intellij.psi.PsiLiteralValue"]
    extends="com.github.xepozz.php_opcodes_language.language.psi.impl.PHPOpPathAbsoluteBaseImpl"
}


statement ::= line_number (assignment_instruction | instruction)
{
    pin=1
}

assignment_instruction ::= (paren_parameter | parameter) EQUALS_SIGN instruction
{
    pin=2
}

instruction ::= parameter argument*

argument ::= paren_expr | array_expr | expr
private expr ::= three_dots | var_name | string_literal | float_value | line_number | paren_parameter | parameter

paren_parameter ::= parameter paren_expr
{
    implements=["com.intellij.psi.NavigatablePsiElement" "com.intellij.psi.PsiNamedElement" "com.intellij.psi.PsiPolyVariantReference"]
    extends="com.github.xepozz.php_opcodes_language.language.psi.impl.PHPOpParenParameterBaseImpl"
}

parameter ::= IDENTIFIER
{
    implements=["com.intellij.psi.NavigatablePsiElement" "com.intellij.psi.PsiNamedElement" "com.intellij.psi.PsiPolyVariantReference"]
    extends="com.github.xepozz.php_opcodes_language.language.psi.impl.PHPOpParameterBaseImpl"
    methods=[isVariable]
}

string_literal ::= QUOTTED_STRING
{
    implements=["com.intellij.psi.PsiLanguageInjectionHost" "com.intellij.psi.PsiLiteralValue"]
    extends="com.github.xepozz.php_opcodes_language.language.psi.impl.PHPOpStringLiteralBaseImpl"
}

float_value ::= FLOAT
{
    implements=["com.intellij.psi.PsiLanguageInjectionHost" "com.intellij.psi.PsiLiteralValue"]
    extends="com.github.xepozz.php_opcodes_language.language.psi.impl.PHPOpStringLiteralBaseImpl"
}

private three_dots ::= DOT DOT DOT
{
}

paren_expr ::= LPAREN expr RPAREN
{
    pin=1
}

array_expr ::= LBRACKET expr (COMMA expr)* RBRACKET
{
    pin=1
}

var_name ::= DOLLAR_SIGN IDENTIFIER
{
    implements=["com.intellij.psi.NavigatablePsiElement" "com.intellij.psi.PsiNamedElement" "com.intellij.psi.PsiPolyVariantReference"]
    extends="com.github.xepozz.php_opcodes_language.language.psi.impl.PHPOpVarNameBaseImpl"
}

live_range ::= 'LIVE RANGES:' (live_range_statement | EOL)*

live_range_statement ::= INTEGER COLON live_range_range LPAREN live_type RPAREN
{
    pin=2
}

live_range_range ::= line_number DASH line_number
{
    pin=2
}

live_type::= IDENTIFIER (SLASH IDENTIFIER)?

line_number ::= INTEGER
{
    implements=["com.intellij.psi.NavigatablePsiElement" "com.intellij.psi.PsiNamedElement" "com.intellij.psi.PsiPolyVariantReference"]
    extends="com.github.xepozz.php_opcodes_language.language.psi.impl.PHPOpLineNumberBaseImpl"
}